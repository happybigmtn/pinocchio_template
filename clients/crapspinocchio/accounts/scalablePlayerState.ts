/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type ScalablePlayerState = {
  player: ReadonlyUint8Array;
  balance: ReadonlyUint8Array;
  activeTournament: ReadonlyUint8Array;
  currentEpoch: ReadonlyUint8Array;
  totalWagered: ReadonlyUint8Array;
  totalWon: ReadonlyUint8Array;
  lastBetSlot: ReadonlyUint8Array;
  lastClaimSlot: ReadonlyUint8Array;
  lastTournamentUpdateSlot: ReadonlyUint8Array;
  verificationTier: number;
  bump: number;
  padding: ReadonlyUint8Array;
};

export type ScalablePlayerStateArgs = ScalablePlayerState;

export function getScalablePlayerStateEncoder(): Encoder<ScalablePlayerStateArgs> {
  return getStructEncoder([
    ['player', fixEncoderSize(getBytesEncoder(), 32)],
    ['balance', fixEncoderSize(getBytesEncoder(), 8)],
    ['activeTournament', fixEncoderSize(getBytesEncoder(), 32)],
    ['currentEpoch', fixEncoderSize(getBytesEncoder(), 8)],
    ['totalWagered', fixEncoderSize(getBytesEncoder(), 8)],
    ['totalWon', fixEncoderSize(getBytesEncoder(), 8)],
    ['lastBetSlot', fixEncoderSize(getBytesEncoder(), 8)],
    ['lastClaimSlot', fixEncoderSize(getBytesEncoder(), 8)],
    ['lastTournamentUpdateSlot', fixEncoderSize(getBytesEncoder(), 8)],
    ['verificationTier', getU8Encoder()],
    ['bump', getU8Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 6)],
  ]);
}

export function getScalablePlayerStateDecoder(): Decoder<ScalablePlayerState> {
  return getStructDecoder([
    ['player', fixDecoderSize(getBytesDecoder(), 32)],
    ['balance', fixDecoderSize(getBytesDecoder(), 8)],
    ['activeTournament', fixDecoderSize(getBytesDecoder(), 32)],
    ['currentEpoch', fixDecoderSize(getBytesDecoder(), 8)],
    ['totalWagered', fixDecoderSize(getBytesDecoder(), 8)],
    ['totalWon', fixDecoderSize(getBytesDecoder(), 8)],
    ['lastBetSlot', fixDecoderSize(getBytesDecoder(), 8)],
    ['lastClaimSlot', fixDecoderSize(getBytesDecoder(), 8)],
    ['lastTournamentUpdateSlot', fixDecoderSize(getBytesDecoder(), 8)],
    ['verificationTier', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 6)],
  ]);
}

export function getScalablePlayerStateCodec(): Codec<
  ScalablePlayerStateArgs,
  ScalablePlayerState
> {
  return combineCodec(
    getScalablePlayerStateEncoder(),
    getScalablePlayerStateDecoder(),
  );
}

export function decodeScalablePlayerState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<ScalablePlayerState, TAddress>;
export function decodeScalablePlayerState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<ScalablePlayerState, TAddress>;
export function decodeScalablePlayerState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<ScalablePlayerState, TAddress>
  | MaybeAccount<ScalablePlayerState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getScalablePlayerStateDecoder(),
  );
}

export async function fetchScalablePlayerState<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<ScalablePlayerState, TAddress>> {
  const maybeAccount = await fetchMaybeScalablePlayerState(
    rpc,
    address,
    config,
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeScalablePlayerState<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<ScalablePlayerState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeScalablePlayerState(maybeAccount);
}

export async function fetchAllScalablePlayerState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<ScalablePlayerState>[]> {
  const maybeAccounts = await fetchAllMaybeScalablePlayerState(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeScalablePlayerState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<ScalablePlayerState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeScalablePlayerState(maybeAccount),
  );
}

export function getScalablePlayerStateSize(): number {
  return 128;
}
