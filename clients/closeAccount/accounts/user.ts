/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getStructDecoder,
  getStructEncoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export const USER_DISCRIMINATOR = 0;

export function getUserDiscriminatorBytes() {
  return getU8Encoder().encode(USER_DISCRIMINATOR);
}

export type User = { name: string };

export type UserArgs = User;

export function getUserEncoder(): Encoder<UserArgs> {
  return getStructEncoder([['name', fixEncoderSize(getUtf8Encoder(), 64)]]);
}

export function getUserDecoder(): Decoder<User> {
  return getStructDecoder([['name', fixDecoderSize(getUtf8Decoder(), 64)]]);
}

export function getUserCodec(): Codec<UserArgs, User> {
  return combineCodec(getUserEncoder(), getUserDecoder());
}

export function decodeUser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<User, TAddress>;
export function decodeUser<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<User, TAddress>;
export function decodeUser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<User, TAddress> | MaybeAccount<User, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserDecoder(),
  );
}

export async function fetchUser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<User, TAddress>> {
  const maybeAccount = await fetchMaybeUser(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<User, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUser(maybeAccount);
}

export async function fetchAllUser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<User>[]> {
  const maybeAccounts = await fetchAllMaybeUser(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<User>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUser(maybeAccount));
}
