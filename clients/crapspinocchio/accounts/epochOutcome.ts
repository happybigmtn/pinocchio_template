/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type EpochOutcome = {
  epoch: ReadonlyUint8Array;
  dice: ReadonlyUint8Array;
  phase: number;
  point: number;
  resolved: number;
  padding: ReadonlyUint8Array;
  totalPayouts: ReadonlyUint8Array;
  finalizedSlot: ReadonlyUint8Array;
  reserved: ReadonlyUint8Array;
};

export type EpochOutcomeArgs = EpochOutcome;

export function getEpochOutcomeEncoder(): Encoder<EpochOutcomeArgs> {
  return getStructEncoder([
    ['epoch', fixEncoderSize(getBytesEncoder(), 8)],
    ['dice', fixEncoderSize(getBytesEncoder(), 2)],
    ['phase', getU8Encoder()],
    ['point', getU8Encoder()],
    ['resolved', getU8Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 3)],
    ['totalPayouts', fixEncoderSize(getBytesEncoder(), 8)],
    ['finalizedSlot', fixEncoderSize(getBytesEncoder(), 8)],
    ['reserved', fixEncoderSize(getBytesEncoder(), 32)],
  ]);
}

export function getEpochOutcomeDecoder(): Decoder<EpochOutcome> {
  return getStructDecoder([
    ['epoch', fixDecoderSize(getBytesDecoder(), 8)],
    ['dice', fixDecoderSize(getBytesDecoder(), 2)],
    ['phase', getU8Decoder()],
    ['point', getU8Decoder()],
    ['resolved', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 3)],
    ['totalPayouts', fixDecoderSize(getBytesDecoder(), 8)],
    ['finalizedSlot', fixDecoderSize(getBytesDecoder(), 8)],
    ['reserved', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getEpochOutcomeCodec(): Codec<EpochOutcomeArgs, EpochOutcome> {
  return combineCodec(getEpochOutcomeEncoder(), getEpochOutcomeDecoder());
}

export function decodeEpochOutcome<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<EpochOutcome, TAddress>;
export function decodeEpochOutcome<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<EpochOutcome, TAddress>;
export function decodeEpochOutcome<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<EpochOutcome, TAddress> | MaybeAccount<EpochOutcome, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEpochOutcomeDecoder(),
  );
}

export async function fetchEpochOutcome<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<EpochOutcome, TAddress>> {
  const maybeAccount = await fetchMaybeEpochOutcome(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEpochOutcome<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<EpochOutcome, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEpochOutcome(maybeAccount);
}

export async function fetchAllEpochOutcome(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<EpochOutcome>[]> {
  const maybeAccounts = await fetchAllMaybeEpochOutcome(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEpochOutcome(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<EpochOutcome>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeEpochOutcome(maybeAccount));
}

export function getEpochOutcomeSize(): number {
  return 64;
}
