/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type GlobalGameState = {
  gameEpoch: ReadonlyUint8Array;
  currentDice: number;
  currentDie1: number;
  currentDie2: number;
  currentPoint: number;
  gamePhase: number;
  padding1: ReadonlyUint8Array;
  epochStartSlot: ReadonlyUint8Array;
  nextRollSlot: ReadonlyUint8Array;
  shooterEstablishedEpoch: ReadonlyUint8Array;
  totalActiveBets: ReadonlyUint8Array;
  epochRollCount: ReadonlyUint8Array;
  padding2: ReadonlyUint8Array;
  treasury: ReadonlyUint8Array;
  authority: ReadonlyUint8Array;
  rngAuthority: ReadonlyUint8Array;
  crapTokenMint: ReadonlyUint8Array;
  devModeEnabled: number;
  paused: number;
  useSecureRng: number;
  bump: number;
  padding3: ReadonlyUint8Array;
};

export type GlobalGameStateArgs = GlobalGameState;

export function getGlobalGameStateEncoder(): Encoder<GlobalGameStateArgs> {
  return getStructEncoder([
    ['gameEpoch', fixEncoderSize(getBytesEncoder(), 8)],
    ['currentDice', getU8Encoder()],
    ['currentDie1', getU8Encoder()],
    ['currentDie2', getU8Encoder()],
    ['currentPoint', getU8Encoder()],
    ['gamePhase', getU8Encoder()],
    ['padding1', fixEncoderSize(getBytesEncoder(), 3)],
    ['epochStartSlot', fixEncoderSize(getBytesEncoder(), 8)],
    ['nextRollSlot', fixEncoderSize(getBytesEncoder(), 8)],
    ['shooterEstablishedEpoch', fixEncoderSize(getBytesEncoder(), 8)],
    ['totalActiveBets', fixEncoderSize(getBytesEncoder(), 8)],
    ['epochRollCount', fixEncoderSize(getBytesEncoder(), 4)],
    ['padding2', fixEncoderSize(getBytesEncoder(), 4)],
    ['treasury', fixEncoderSize(getBytesEncoder(), 32)],
    ['authority', fixEncoderSize(getBytesEncoder(), 32)],
    ['rngAuthority', fixEncoderSize(getBytesEncoder(), 32)],
    ['crapTokenMint', fixEncoderSize(getBytesEncoder(), 32)],
    ['devModeEnabled', getU8Encoder()],
    ['paused', getU8Encoder()],
    ['useSecureRng', getU8Encoder()],
    ['bump', getU8Encoder()],
    ['padding3', fixEncoderSize(getBytesEncoder(), 4)],
  ]);
}

export function getGlobalGameStateDecoder(): Decoder<GlobalGameState> {
  return getStructDecoder([
    ['gameEpoch', fixDecoderSize(getBytesDecoder(), 8)],
    ['currentDice', getU8Decoder()],
    ['currentDie1', getU8Decoder()],
    ['currentDie2', getU8Decoder()],
    ['currentPoint', getU8Decoder()],
    ['gamePhase', getU8Decoder()],
    ['padding1', fixDecoderSize(getBytesDecoder(), 3)],
    ['epochStartSlot', fixDecoderSize(getBytesDecoder(), 8)],
    ['nextRollSlot', fixDecoderSize(getBytesDecoder(), 8)],
    ['shooterEstablishedEpoch', fixDecoderSize(getBytesDecoder(), 8)],
    ['totalActiveBets', fixDecoderSize(getBytesDecoder(), 8)],
    ['epochRollCount', fixDecoderSize(getBytesDecoder(), 4)],
    ['padding2', fixDecoderSize(getBytesDecoder(), 4)],
    ['treasury', fixDecoderSize(getBytesDecoder(), 32)],
    ['authority', fixDecoderSize(getBytesDecoder(), 32)],
    ['rngAuthority', fixDecoderSize(getBytesDecoder(), 32)],
    ['crapTokenMint', fixDecoderSize(getBytesDecoder(), 32)],
    ['devModeEnabled', getU8Decoder()],
    ['paused', getU8Decoder()],
    ['useSecureRng', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['padding3', fixDecoderSize(getBytesDecoder(), 4)],
  ]);
}

export function getGlobalGameStateCodec(): Codec<
  GlobalGameStateArgs,
  GlobalGameState
> {
  return combineCodec(getGlobalGameStateEncoder(), getGlobalGameStateDecoder());
}

export function decodeGlobalGameState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<GlobalGameState, TAddress>;
export function decodeGlobalGameState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<GlobalGameState, TAddress>;
export function decodeGlobalGameState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<GlobalGameState, TAddress>
  | MaybeAccount<GlobalGameState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGlobalGameStateDecoder(),
  );
}

export async function fetchGlobalGameState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<GlobalGameState, TAddress>> {
  const maybeAccount = await fetchMaybeGlobalGameState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGlobalGameState<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<GlobalGameState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGlobalGameState(maybeAccount);
}

export async function fetchAllGlobalGameState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<GlobalGameState>[]> {
  const maybeAccounts = await fetchAllMaybeGlobalGameState(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGlobalGameState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<GlobalGameState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeGlobalGameState(maybeAccount),
  );
}

export function getGlobalGameStateSize(): number {
  return 192;
}
