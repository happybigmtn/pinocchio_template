/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CRAPS_PINOCCHIO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_PLAYER_DISCRIMINATOR = 2;

export function getInitializePlayerDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_PLAYER_DISCRIMINATOR);
}

export type InitializePlayerInstruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountPlayerState extends string | IAccountMeta<string> = string,
  TAccountPlayer extends string | IAccountMeta<string> = string,
  TAccountGlobalGameState extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPlayerState extends string
        ? WritableAccount<TAccountPlayerState>
        : TAccountPlayerState,
      TAccountPlayer extends string
        ? WritableSignerAccount<TAccountPlayer> &
            IAccountSignerMeta<TAccountPlayer>
        : TAccountPlayer,
      TAccountGlobalGameState extends string
        ? ReadonlyAccount<TAccountGlobalGameState>
        : TAccountGlobalGameState,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePlayerInstructionData = { discriminator: number };

export type InitializePlayerInstructionDataArgs = {};

export function getInitializePlayerInstructionDataEncoder(): Encoder<InitializePlayerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: INITIALIZE_PLAYER_DISCRIMINATOR }),
  );
}

export function getInitializePlayerInstructionDataDecoder(): Decoder<InitializePlayerInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getInitializePlayerInstructionDataCodec(): Codec<
  InitializePlayerInstructionDataArgs,
  InitializePlayerInstructionData
> {
  return combineCodec(
    getInitializePlayerInstructionDataEncoder(),
    getInitializePlayerInstructionDataDecoder(),
  );
}

export type InitializePlayerInput<
  TAccountPlayerState extends string = string,
  TAccountPlayer extends string = string,
  TAccountGlobalGameState extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Player state account */
  playerState: Address<TAccountPlayerState>;
  /** Player account */
  player: TransactionSigner<TAccountPlayer>;
  /** Global game state account */
  globalGameState: Address<TAccountGlobalGameState>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializePlayerInstruction<
  TAccountPlayerState extends string,
  TAccountPlayer extends string,
  TAccountGlobalGameState extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
>(
  input: InitializePlayerInput<
    TAccountPlayerState,
    TAccountPlayer,
    TAccountGlobalGameState,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitializePlayerInstruction<
  TProgramAddress,
  TAccountPlayerState,
  TAccountPlayer,
  TAccountGlobalGameState,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CRAPS_PINOCCHIO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    playerState: { value: input.playerState ?? null, isWritable: true },
    player: { value: input.player ?? null, isWritable: true },
    globalGameState: {
      value: input.globalGameState ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.globalGameState),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializePlayerInstructionDataEncoder().encode({}),
  } as InitializePlayerInstruction<
    TProgramAddress,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountGlobalGameState,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializePlayerInstruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Player state account */
    playerState: TAccountMetas[0];
    /** Player account */
    player: TAccountMetas[1];
    /** Global game state account */
    globalGameState: TAccountMetas[2];
    /** System program */
    systemProgram: TAccountMetas[3];
  };
  data: InitializePlayerInstructionData;
};

export function parseInitializePlayerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedInitializePlayerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      playerState: getNextAccount(),
      player: getNextAccount(),
      globalGameState: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializePlayerInstructionDataDecoder().decode(instruction.data),
  };
}
