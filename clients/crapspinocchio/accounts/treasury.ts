/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type Treasury = {
  authority: ReadonlyUint8Array;
  tokenMint: ReadonlyUint8Array;
  vault: ReadonlyUint8Array;
  totalDeposits: ReadonlyUint8Array;
  totalWithdrawals: ReadonlyUint8Array;
  totalPayouts: ReadonlyUint8Array;
  totalBetsPlaced: ReadonlyUint8Array;
  totalBetsSettled: ReadonlyUint8Array;
  lastUpdateSlot: ReadonlyUint8Array;
  emergencyShutdown: number;
  bump: number;
  padding: ReadonlyUint8Array;
};

export type TreasuryArgs = Treasury;

export function getTreasuryEncoder(): Encoder<TreasuryArgs> {
  return getStructEncoder([
    ['authority', fixEncoderSize(getBytesEncoder(), 32)],
    ['tokenMint', fixEncoderSize(getBytesEncoder(), 32)],
    ['vault', fixEncoderSize(getBytesEncoder(), 32)],
    ['totalDeposits', fixEncoderSize(getBytesEncoder(), 8)],
    ['totalWithdrawals', fixEncoderSize(getBytesEncoder(), 8)],
    ['totalPayouts', fixEncoderSize(getBytesEncoder(), 8)],
    ['totalBetsPlaced', fixEncoderSize(getBytesEncoder(), 8)],
    ['totalBetsSettled', fixEncoderSize(getBytesEncoder(), 8)],
    ['lastUpdateSlot', fixEncoderSize(getBytesEncoder(), 8)],
    ['emergencyShutdown', getU8Encoder()],
    ['bump', getU8Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 6)],
  ]);
}

export function getTreasuryDecoder(): Decoder<Treasury> {
  return getStructDecoder([
    ['authority', fixDecoderSize(getBytesDecoder(), 32)],
    ['tokenMint', fixDecoderSize(getBytesDecoder(), 32)],
    ['vault', fixDecoderSize(getBytesDecoder(), 32)],
    ['totalDeposits', fixDecoderSize(getBytesDecoder(), 8)],
    ['totalWithdrawals', fixDecoderSize(getBytesDecoder(), 8)],
    ['totalPayouts', fixDecoderSize(getBytesDecoder(), 8)],
    ['totalBetsPlaced', fixDecoderSize(getBytesDecoder(), 8)],
    ['totalBetsSettled', fixDecoderSize(getBytesDecoder(), 8)],
    ['lastUpdateSlot', fixDecoderSize(getBytesDecoder(), 8)],
    ['emergencyShutdown', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 6)],
  ]);
}

export function getTreasuryCodec(): Codec<TreasuryArgs, Treasury> {
  return combineCodec(getTreasuryEncoder(), getTreasuryDecoder());
}

export function decodeTreasury<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Treasury, TAddress>;
export function decodeTreasury<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Treasury, TAddress>;
export function decodeTreasury<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Treasury, TAddress> | MaybeAccount<Treasury, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTreasuryDecoder(),
  );
}

export async function fetchTreasury<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Treasury, TAddress>> {
  const maybeAccount = await fetchMaybeTreasury(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTreasury<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Treasury, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTreasury(maybeAccount);
}

export async function fetchAllTreasury(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<Treasury>[]> {
  const maybeAccounts = await fetchAllMaybeTreasury(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTreasury(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Treasury>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTreasury(maybeAccount));
}

export function getTreasurySize(): number {
  return 152;
}
