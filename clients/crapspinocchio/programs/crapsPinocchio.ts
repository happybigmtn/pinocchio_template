/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedClaimEpochPayoutsUnifiedInstruction,
  type ParsedCleanupBetBatchInstruction,
  type ParsedCleanupOldBetBatchInstruction,
  type ParsedCleanupOldEpochOutcomeInstruction,
  type ParsedClearPlayerTournamentInstruction,
  type ParsedClosePlayerAccountInstruction,
  type ParsedCollectBlockHashInstruction,
  type ParsedDepositV2Instruction,
  type ParsedDepositWithAutoClaimV2Instruction,
  type ParsedEmergencyPauseInstruction,
  type ParsedEmergencyShutdownInstruction,
  type ParsedEnableSecureRngInstruction,
  type ParsedExecuteAuthorityTransferInstruction,
  type ParsedFinalizeRngInstruction,
  type ParsedInitializeCriticalPDAsInstruction,
  type ParsedInitializePlayerInstruction,
  type ParsedInitializeSystemInstruction,
  type ParsedPlaceBetInstruction,
  type ParsedResumeGameInstruction,
  type ParsedResumeOperationsInstruction,
  type ParsedSecureAutoRollInstruction,
  type ParsedSettleRealizableBetsInstruction,
  type ParsedStartBettingPhaseInstruction,
  type ParsedUpdateAdminAuthorityInstruction,
  type ParsedUpdateAuthorityInstruction,
  type ParsedUpdateEmergencyAuthorityInstruction,
  type ParsedUpdatePlayerTournamentInstruction,
  type ParsedUpdateRngAuthorityInstruction,
  type ParsedUpdateTreasuryAuthorityInstruction,
  type ParsedUpdateTreasuryParametersInstruction,
  type ParsedWithdrawV2Instruction,
  type ParsedWithdrawWithAutoClaimV2Instruction,
} from '../instructions';

export const CRAPS_PINOCCHIO_PROGRAM_ADDRESS =
  '2yxPAyKVGMz6trfp8caRMWCoY5psMq6H1r4cuynLrvoX' as Address<'2yxPAyKVGMz6trfp8caRMWCoY5psMq6H1r4cuynLrvoX'>;

export enum CrapsPinocchioAccount {
  EpochOutcome,
  Favorites,
  BetBatch,
  BonusState,
  GlobalGameState,
  ScalablePlayerState,
  RngState,
  Treasury,
}

export enum CrapsPinocchioInstruction {
  InitializeSystem,
  InitializeCriticalPDAs,
  InitializePlayer,
  ClosePlayerAccount,
  DepositV2,
  WithdrawV2,
  DepositWithAutoClaimV2,
  WithdrawWithAutoClaimV2,
  PlaceBet,
  SecureAutoRoll,
  CollectBlockHash,
  FinalizeRng,
  StartBettingPhase,
  SettleRealizableBets,
  ClaimEpochPayoutsUnified,
  CleanupBetBatch,
  CleanupOldBetBatch,
  CleanupOldEpochOutcome,
  UpdateAuthority,
  UpdateRngAuthority,
  UpdateAdminAuthority,
  UpdateEmergencyAuthority,
  ExecuteAuthorityTransfer,
  EmergencyShutdown,
  ResumeOperations,
  EmergencyPause,
  ResumeGame,
  EnableSecureRng,
  UpdatePlayerTournament,
  ClearPlayerTournament,
  UpdateTreasuryAuthority,
  UpdateTreasuryParameters,
}

export function identifyCrapsPinocchioInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): CrapsPinocchioInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return CrapsPinocchioInstruction.InitializeSystem;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return CrapsPinocchioInstruction.InitializeCriticalPDAs;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return CrapsPinocchioInstruction.InitializePlayer;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return CrapsPinocchioInstruction.ClosePlayerAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return CrapsPinocchioInstruction.DepositV2;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return CrapsPinocchioInstruction.WithdrawV2;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return CrapsPinocchioInstruction.DepositWithAutoClaimV2;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return CrapsPinocchioInstruction.WithdrawWithAutoClaimV2;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return CrapsPinocchioInstruction.PlaceBet;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return CrapsPinocchioInstruction.SecureAutoRoll;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return CrapsPinocchioInstruction.CollectBlockHash;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return CrapsPinocchioInstruction.FinalizeRng;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return CrapsPinocchioInstruction.StartBettingPhase;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return CrapsPinocchioInstruction.SettleRealizableBets;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return CrapsPinocchioInstruction.ClaimEpochPayoutsUnified;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return CrapsPinocchioInstruction.CleanupBetBatch;
  }
  if (containsBytes(data, getU8Encoder().encode(16), 0)) {
    return CrapsPinocchioInstruction.CleanupOldBetBatch;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return CrapsPinocchioInstruction.CleanupOldEpochOutcome;
  }
  if (containsBytes(data, getU8Encoder().encode(18), 0)) {
    return CrapsPinocchioInstruction.UpdateAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(19), 0)) {
    return CrapsPinocchioInstruction.UpdateRngAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(20), 0)) {
    return CrapsPinocchioInstruction.UpdateAdminAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(21), 0)) {
    return CrapsPinocchioInstruction.UpdateEmergencyAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(22), 0)) {
    return CrapsPinocchioInstruction.ExecuteAuthorityTransfer;
  }
  if (containsBytes(data, getU8Encoder().encode(23), 0)) {
    return CrapsPinocchioInstruction.EmergencyShutdown;
  }
  if (containsBytes(data, getU8Encoder().encode(24), 0)) {
    return CrapsPinocchioInstruction.ResumeOperations;
  }
  if (containsBytes(data, getU8Encoder().encode(25), 0)) {
    return CrapsPinocchioInstruction.EmergencyPause;
  }
  if (containsBytes(data, getU8Encoder().encode(26), 0)) {
    return CrapsPinocchioInstruction.ResumeGame;
  }
  if (containsBytes(data, getU8Encoder().encode(27), 0)) {
    return CrapsPinocchioInstruction.EnableSecureRng;
  }
  if (containsBytes(data, getU8Encoder().encode(28), 0)) {
    return CrapsPinocchioInstruction.UpdatePlayerTournament;
  }
  if (containsBytes(data, getU8Encoder().encode(29), 0)) {
    return CrapsPinocchioInstruction.ClearPlayerTournament;
  }
  if (containsBytes(data, getU8Encoder().encode(30), 0)) {
    return CrapsPinocchioInstruction.UpdateTreasuryAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(31), 0)) {
    return CrapsPinocchioInstruction.UpdateTreasuryParameters;
  }
  throw new Error(
    'The provided instruction could not be identified as a crapsPinocchio instruction.',
  );
}

export type ParsedCrapsPinocchioInstruction<
  TProgram extends string = '2yxPAyKVGMz6trfp8caRMWCoY5psMq6H1r4cuynLrvoX',
> =
  | ({
      instructionType: CrapsPinocchioInstruction.InitializeSystem;
    } & ParsedInitializeSystemInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.InitializeCriticalPDAs;
    } & ParsedInitializeCriticalPDAsInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.InitializePlayer;
    } & ParsedInitializePlayerInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.ClosePlayerAccount;
    } & ParsedClosePlayerAccountInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.DepositV2;
    } & ParsedDepositV2Instruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.WithdrawV2;
    } & ParsedWithdrawV2Instruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.DepositWithAutoClaimV2;
    } & ParsedDepositWithAutoClaimV2Instruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.WithdrawWithAutoClaimV2;
    } & ParsedWithdrawWithAutoClaimV2Instruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.PlaceBet;
    } & ParsedPlaceBetInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.SecureAutoRoll;
    } & ParsedSecureAutoRollInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.CollectBlockHash;
    } & ParsedCollectBlockHashInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.FinalizeRng;
    } & ParsedFinalizeRngInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.StartBettingPhase;
    } & ParsedStartBettingPhaseInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.SettleRealizableBets;
    } & ParsedSettleRealizableBetsInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.ClaimEpochPayoutsUnified;
    } & ParsedClaimEpochPayoutsUnifiedInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.CleanupBetBatch;
    } & ParsedCleanupBetBatchInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.CleanupOldBetBatch;
    } & ParsedCleanupOldBetBatchInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.CleanupOldEpochOutcome;
    } & ParsedCleanupOldEpochOutcomeInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.UpdateAuthority;
    } & ParsedUpdateAuthorityInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.UpdateRngAuthority;
    } & ParsedUpdateRngAuthorityInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.UpdateAdminAuthority;
    } & ParsedUpdateAdminAuthorityInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.UpdateEmergencyAuthority;
    } & ParsedUpdateEmergencyAuthorityInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.ExecuteAuthorityTransfer;
    } & ParsedExecuteAuthorityTransferInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.EmergencyShutdown;
    } & ParsedEmergencyShutdownInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.ResumeOperations;
    } & ParsedResumeOperationsInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.EmergencyPause;
    } & ParsedEmergencyPauseInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.ResumeGame;
    } & ParsedResumeGameInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.EnableSecureRng;
    } & ParsedEnableSecureRngInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.UpdatePlayerTournament;
    } & ParsedUpdatePlayerTournamentInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.ClearPlayerTournament;
    } & ParsedClearPlayerTournamentInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.UpdateTreasuryAuthority;
    } & ParsedUpdateTreasuryAuthorityInstruction<TProgram>)
  | ({
      instructionType: CrapsPinocchioInstruction.UpdateTreasuryParameters;
    } & ParsedUpdateTreasuryParametersInstruction<TProgram>);
