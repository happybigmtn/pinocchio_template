/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCloseUserInstruction,
  type ParsedCreateUserInstruction,
} from '../instructions';

export const CLOSE_ACCOUNT_PROGRAM_ADDRESS =
  'H9ZpziEUkrhakmLKaFXeokJFhTFm69jJ8aVSso43PopB' as Address<'H9ZpziEUkrhakmLKaFXeokJFhTFm69jJ8aVSso43PopB'>;

export enum CloseAccountAccount {
  User,
}

export function identifyCloseAccountAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): CloseAccountAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return CloseAccountAccount.User;
  }
  throw new Error(
    'The provided account could not be identified as a closeAccount account.',
  );
}

export enum CloseAccountInstruction {
  CreateUser,
  CloseUser,
}

export function identifyCloseAccountInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): CloseAccountInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return CloseAccountInstruction.CreateUser;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return CloseAccountInstruction.CloseUser;
  }
  throw new Error(
    'The provided instruction could not be identified as a closeAccount instruction.',
  );
}

export type ParsedCloseAccountInstruction<
  TProgram extends string = 'H9ZpziEUkrhakmLKaFXeokJFhTFm69jJ8aVSso43PopB',
> =
  | ({
      instructionType: CloseAccountInstruction.CreateUser;
    } & ParsedCreateUserInstruction<TProgram>)
  | ({
      instructionType: CloseAccountInstruction.CloseUser;
    } & ParsedCloseUserInstruction<TProgram>);
