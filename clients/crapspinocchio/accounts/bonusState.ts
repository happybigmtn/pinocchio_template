/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type BonusState = {
  smallRolled: number;
  tallRolled: number;
  doublesRolled: number;
  firePoints: number;
  hotRollerCount: number;
  rideLineStreak: number;
  hits: ReadonlyUint8Array;
  passWins: ReadonlyUint8Array;
  doubles: ReadonlyUint8Array;
  reserved: ReadonlyUint8Array;
};

export type BonusStateArgs = BonusState;

export function getBonusStateEncoder(): Encoder<BonusStateArgs> {
  return getStructEncoder([
    ['smallRolled', getU8Encoder()],
    ['tallRolled', getU8Encoder()],
    ['doublesRolled', getU8Encoder()],
    ['firePoints', getU8Encoder()],
    ['hotRollerCount', getU8Encoder()],
    ['rideLineStreak', getU8Encoder()],
    ['hits', fixEncoderSize(getBytesEncoder(), 11)],
    ['passWins', fixEncoderSize(getBytesEncoder(), 6)],
    ['doubles', fixEncoderSize(getBytesEncoder(), 6)],
    ['reserved', fixEncoderSize(getBytesEncoder(), 8)],
  ]);
}

export function getBonusStateDecoder(): Decoder<BonusState> {
  return getStructDecoder([
    ['smallRolled', getU8Decoder()],
    ['tallRolled', getU8Decoder()],
    ['doublesRolled', getU8Decoder()],
    ['firePoints', getU8Decoder()],
    ['hotRollerCount', getU8Decoder()],
    ['rideLineStreak', getU8Decoder()],
    ['hits', fixDecoderSize(getBytesDecoder(), 11)],
    ['passWins', fixDecoderSize(getBytesDecoder(), 6)],
    ['doubles', fixDecoderSize(getBytesDecoder(), 6)],
    ['reserved', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getBonusStateCodec(): Codec<BonusStateArgs, BonusState> {
  return combineCodec(getBonusStateEncoder(), getBonusStateDecoder());
}

export function decodeBonusState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<BonusState, TAddress>;
export function decodeBonusState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<BonusState, TAddress>;
export function decodeBonusState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<BonusState, TAddress> | MaybeAccount<BonusState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBonusStateDecoder(),
  );
}

export async function fetchBonusState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<BonusState, TAddress>> {
  const maybeAccount = await fetchMaybeBonusState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBonusState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<BonusState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBonusState(maybeAccount);
}

export async function fetchAllBonusState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<BonusState>[]> {
  const maybeAccounts = await fetchAllMaybeBonusState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBonusState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<BonusState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBonusState(maybeAccount));
}

export function getBonusStateSize(): number {
  return 37;
}
