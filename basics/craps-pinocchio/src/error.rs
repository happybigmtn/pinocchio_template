use pinocchio::program_error::ProgramError;

/// Unified error codes for craps-pinocchio
/// 
/// Error code ranges:
/// 0-99: General/System errors
/// 100-199: Core game errors
/// 200-299: Social errors (reserved for future use)
/// 300-399: Tournament errors (reserved for future use)
#[derive(Clone, Debug, Eq, PartialEq)]
pub enum CrapsError {
    // 0-99: General/System errors
    NumericalOverflow = 0,
    NumericalUnderflow = 1,
    InvalidAccount = 2,
    InvalidTokenAccount = 3,
    InvalidTokenMint = 4,
    Unauthorized = 5,
    NotAuthorized = 6,
    WrongAuthority = 7,
    InsufficientAuthority = 8,
    UnauthorizedAction = 9,
    TooEarly = 10,
    AccountNotInitialized = 11,
    SystemNotInitialized = 12,
    NotImplemented = 13,
    DeserializationError = 14,
    SerializationError = 15,
    InvalidProgramOwner = 16,
    InvalidPda = 17,
    ExpectedEmptyAccount = 18,
    ExpectedNonEmptyAccount = 19,
    ExpectedSignerAccount = 20,
    ExpectedWritableAccount = 21,
    AccountMismatch = 22,
    InvalidAccountKey = 23,
    MissingSignature = 24,
    InvalidRemainingAccounts = 25,
    UnauthorizedInitializer = 26,
    SystemAlreadyInitialized = 27,

    // 100-199: Core game errors
    InsufficientChips = 100,
    ZeroBet = 101,
    InvalidDiceTotal = 102,
    RollIntervalNotMet = 103,
    RollTooSoon = 104,
    GamePaused = 105,
    AutoRollDisabled = 106,
    InvalidBetAmount = 107,
    InvalidBetKind = 108,
    InvalidBetData = 109,
    TooManyBets = 110,
    InvalidEpoch = 111,
    InvalidBetForPhase = 112,
    InvalidBetTier = 113,
    BetNotRealizable = 114,
    OddsBetRequiresBase = 115,
    OddsBetRequiresLink = 116,
    BettingWindowClosed = 117,
    BonusOnlyComeOut = 118,
    FireRequiresComeOut = 119,
    RepeaterRequiresComeOut = 120,
    HotRollerRequiresComeOut = 121,
    ChipsAlreadyClaimed = 122,
    AlreadyClaimed = 123,
    DailyClaimCooldown = 124,
    InsufficientTreasuryBalance = 125,
    InvalidDepositAmount = 126,
    InvalidWithdrawalAmount = 127,
    DepositExceedsLimit = 128,
    InsufficientBalance = 129,
    UninitializedConfig = 130,
    InvalidVerificationTier = 131,
    InvalidRngPhase = 132,
    PayoutCalculationOverflow = 133,
    PrizePoolOverflow = 134,
    TooManyHashes = 135,
    NoHashesCollected = 136,
    EpochOutOfRange = 137,
    EpochTooOld = 138,
    TooManyActiveBets = 139,
    InvalidTreasuryAccount = 140,
    InvalidGlobalState = 141,
    InvalidBlockhashData = 142,
    BettingStillOpen = 143,
    RateLimitExceeded = 144,
    InvalidRateLimitAccount = 145,
    EmergencyShutdown = 146,
    PayoutLimitExceeded = 147,
    InsufficientTreasuryFunds = 148,
    InvalidMultisigThreshold = 149,
    InvalidMultisigMembers = 150,
    DuplicateMultisigMembers = 151,
    InvalidAuthorityType = 152,
    InvalidDiceValues = 153,
    AuthorityAlreadyInitialized = 154,
    DuplicateBetBatch = 155,
    PayoutIntegrityError = 156,
    TransferAmountMismatch = 157,
    WithdrawalExceedsLimit = 158,
    UnauthorizedRngAuthority = 159,
    UnauthorizedCPI = 160,
    NoEmergencyToResume = 161,
    InvalidPDA = 162,
    AlreadyInitialized = 163,
    NotInitialized = 164,
    InvalidPlayer = 165,
    InsufficientFunds = 166,
    ActiveTournament = 167,
    InvalidRepeaterTarget = 168,
    InvalidPhase = 169,
    InsufficientBlockHashes = 170,
    MaxBlockHashesReached = 171,
    InvalidAuthority = 172,
    RngNotFinalized = 173,
    InvalidAmount = 174,
    ExceedsWithdrawalLimit = 175,
    BatchFull = 176,
}

impl From<CrapsError> for ProgramError {
    fn from(e: CrapsError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
