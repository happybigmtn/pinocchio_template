/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
} from '@solana/kit';
import { FAVORITES_PROGRAM_ADDRESS } from '../programs';

export const GET_PDA_DISCRIMINATOR = 1;

export function getGetPdaDiscriminatorBytes() {
  return getU8Encoder().encode(GET_PDA_DISCRIMINATOR);
}

export type GetPdaInstruction<
  TProgram extends string = typeof FAVORITES_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type GetPdaInstructionData = { discriminator: number };

export type GetPdaInstructionDataArgs = {};

export function getGetPdaInstructionDataEncoder(): Encoder<GetPdaInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: GET_PDA_DISCRIMINATOR }),
  );
}

export function getGetPdaInstructionDataDecoder(): Decoder<GetPdaInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getGetPdaInstructionDataCodec(): Codec<
  GetPdaInstructionDataArgs,
  GetPdaInstructionData
> {
  return combineCodec(
    getGetPdaInstructionDataEncoder(),
    getGetPdaInstructionDataDecoder(),
  );
}

export type GetPdaInput = {};

export function getGetPdaInstruction<
  TProgramAddress extends Address = typeof FAVORITES_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): GetPdaInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? FAVORITES_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getGetPdaInstructionDataEncoder().encode({}),
  } as GetPdaInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedGetPdaInstruction<
  TProgram extends string = typeof FAVORITES_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: GetPdaInstructionData;
};

export function parseGetPdaInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>,
): ParsedGetPdaInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getGetPdaInstructionDataDecoder().decode(instruction.data),
  };
}
