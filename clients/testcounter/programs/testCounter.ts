/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedDecrementInstruction,
  type ParsedIncrementInstruction,
  type ParsedInitializeInstruction,
  type ParsedResetInstruction,
  type ParsedSetValueInstruction,
} from '../instructions';

export const TEST_COUNTER_PROGRAM_ADDRESS =
  '4UMYWoaqDviq6WvpUo74svyox6JGVhXQemgXCiSxmxhF' as Address<'4UMYWoaqDviq6WvpUo74svyox6JGVhXQemgXCiSxmxhF'>;

export enum TestCounterAccount {
  Counter,
}

export enum TestCounterInstruction {
  Initialize,
  Increment,
  Decrement,
  SetValue,
  Reset,
}

export function identifyTestCounterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): TestCounterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return TestCounterInstruction.Initialize;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return TestCounterInstruction.Increment;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return TestCounterInstruction.Decrement;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return TestCounterInstruction.SetValue;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return TestCounterInstruction.Reset;
  }
  throw new Error(
    'The provided instruction could not be identified as a testCounter instruction.',
  );
}

export type ParsedTestCounterInstruction<
  TProgram extends string = '4UMYWoaqDviq6WvpUo74svyox6JGVhXQemgXCiSxmxhF',
> =
  | ({
      instructionType: TestCounterInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: TestCounterInstruction.Increment;
    } & ParsedIncrementInstruction<TProgram>)
  | ({
      instructionType: TestCounterInstruction.Decrement;
    } & ParsedDecrementInstruction<TProgram>)
  | ({
      instructionType: TestCounterInstruction.SetValue;
    } & ParsedSetValueInstruction<TProgram>)
  | ({
      instructionType: TestCounterInstruction.Reset;
    } & ParsedResetInstruction<TProgram>);
