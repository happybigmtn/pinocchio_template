/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { TEST_COUNTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INCREMENT_DISCRIMINATOR = 1;

export function getIncrementDiscriminatorBytes() {
  return getU8Encoder().encode(INCREMENT_DISCRIMINATOR);
}

export type IncrementInstruction<
  TProgram extends string = typeof TEST_COUNTER_PROGRAM_ADDRESS,
  TAccountTestCounter extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTestCounter extends string
        ? WritableAccount<TAccountTestCounter>
        : TAccountTestCounter,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type IncrementInstructionData = { discriminator: number };

export type IncrementInstructionDataArgs = {};

export function getIncrementInstructionDataEncoder(): Encoder<IncrementInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: INCREMENT_DISCRIMINATOR }),
  );
}

export function getIncrementInstructionDataDecoder(): Decoder<IncrementInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getIncrementInstructionDataCodec(): Codec<
  IncrementInstructionDataArgs,
  IncrementInstructionData
> {
  return combineCodec(
    getIncrementInstructionDataEncoder(),
    getIncrementInstructionDataDecoder(),
  );
}

export type IncrementInput<
  TAccountTestCounter extends string = string,
  TAccountAuthority extends string = string,
> = {
  /** Counter account to increment */
  testCounter: Address<TAccountTestCounter>;
  /** Authority account */
  authority: TransactionSigner<TAccountAuthority>;
};

export function getIncrementInstruction<
  TAccountTestCounter extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof TEST_COUNTER_PROGRAM_ADDRESS,
>(
  input: IncrementInput<TAccountTestCounter, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress },
): IncrementInstruction<
  TProgramAddress,
  TAccountTestCounter,
  TAccountAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEST_COUNTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    testCounter: { value: input.testCounter ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.testCounter),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getIncrementInstructionDataEncoder().encode({}),
  } as IncrementInstruction<
    TProgramAddress,
    TAccountTestCounter,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedIncrementInstruction<
  TProgram extends string = typeof TEST_COUNTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Counter account to increment */
    testCounter: TAccountMetas[0];
    /** Authority account */
    authority: TAccountMetas[1];
  };
  data: IncrementInstructionData;
};

export function parseIncrementInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedIncrementInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      testCounter: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getIncrementInstructionDataDecoder().decode(instruction.data),
  };
}
