/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreatePdaInstruction,
  type ParsedGetPdaInstruction,
} from '../instructions';

export const CREATE_TOKEN_PROGRAM_ADDRESS =
  'AyTbwR15mfGFrfJw2qArB46wXWWZdXwFye5fYouiB3Ci' as Address<'AyTbwR15mfGFrfJw2qArB46wXWWZdXwFye5fYouiB3Ci'>;

export enum CreateTokenAccount {
  Favorites,
}

export enum CreateTokenInstruction {
  CreatePda,
  GetPda,
}

export function identifyCreateTokenInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): CreateTokenInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return CreateTokenInstruction.CreatePda;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return CreateTokenInstruction.GetPda;
  }
  throw new Error(
    'The provided instruction could not be identified as a createToken instruction.',
  );
}

export type ParsedCreateTokenInstruction<
  TProgram extends string = 'AyTbwR15mfGFrfJw2qArB46wXWWZdXwFye5fYouiB3Ci',
> =
  | ({
      instructionType: CreateTokenInstruction.CreatePda;
    } & ParsedCreatePdaInstruction<TProgram>)
  | ({
      instructionType: CreateTokenInstruction.GetPda;
    } & ParsedGetPdaInstruction<TProgram>);
