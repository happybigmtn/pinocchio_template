/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/kit';
import { CROSS_PROGRAM_INVOCATION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_DISCRIMINATOR = 0;

export function getCreateDiscriminatorBytes() {
  return getU8Encoder().encode(CREATE_DISCRIMINATOR);
}

export type CreateInstruction<
  TProgram extends string = typeof CROSS_PROGRAM_INVOCATION_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountAddressInfo extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAddressInfo extends string
        ? WritableSignerAccount<TAccountAddressInfo> &
            IAccountSignerMeta<TAccountAddressInfo>
        : TAccountAddressInfo,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateInstructionData = { discriminator: number };

export type CreateInstructionDataArgs = {};

export function getCreateInstructionDataEncoder(): Encoder<CreateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: CREATE_DISCRIMINATOR }),
  );
}

export function getCreateInstructionDataDecoder(): Decoder<CreateInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCreateInstructionDataCodec(): Codec<
  CreateInstructionDataArgs,
  CreateInstructionData
> {
  return combineCodec(
    getCreateInstructionDataEncoder(),
    getCreateInstructionDataDecoder(),
  );
}

export type CreateInput<
  TAccountPayer extends string = string,
  TAccountAddressInfo extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The account that will pay for the transaction and rent */
  payer: TransactionSigner<TAccountPayer>;
  /** The address info account to create (must be a new keypair) */
  addressInfo: TransactionSigner<TAccountAddressInfo>;
  /** System Program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCreateInstruction<
  TAccountPayer extends string,
  TAccountAddressInfo extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof CROSS_PROGRAM_INVOCATION_PROGRAM_ADDRESS,
>(
  input: CreateInput<TAccountPayer, TAccountAddressInfo, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): CreateInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAddressInfo,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CROSS_PROGRAM_INVOCATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    addressInfo: { value: input.addressInfo ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.addressInfo),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateInstructionDataEncoder().encode({}),
  } as CreateInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAddressInfo,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateInstruction<
  TProgram extends string = typeof CROSS_PROGRAM_INVOCATION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The account that will pay for the transaction and rent */
    payer: TAccountMetas[0];
    /** The address info account to create (must be a new keypair) */
    addressInfo: TAccountMetas[1];
    /** System Program for account creation */
    systemProgram: TAccountMetas[2];
  };
  data: CreateInstructionData;
};

export function parseCreateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedCreateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      addressInfo: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateInstructionDataDecoder().decode(instruction.data),
  };
}
