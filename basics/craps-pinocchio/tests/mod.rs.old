use pinocchio::{
    account_info::AccountInfo,
    pubkey::Pubkey,
    program_error::ProgramError,
    entrypoint::ProgramResult,
    pubkey,
    sysvars::clock::Clock,
    program::invoke_signed,
};
use solana_sdk::system_program;
use mollusk_svm::{Mollusk, result::Check};
use solana_sdk::{
    account::Account as SolanaAccount,
    instruction::{AccountMeta, Instruction},
    signature::Keypair,
    signer::Signer,
    transaction::Transaction,
};
use bytemuck::{Pod, Zeroable};

// Import our program modules
use craps_pinocchio::*;
use craps_pinocchio::{
    constants::*,
    instructions::CrapsInstruction,
    state::*,
};

const PROGRAM_ID: pinocchio::pubkey::Pubkey = craps_pinocchio::ID;
const PROGRAM_ID_SDK: solana_sdk::pubkey::Pubkey = solana_sdk::pubkey::Pubkey::new_from_array(craps_pinocchio::ID);

/// Test helper to create a mollusk instance
pub fn create_mollusk() -> Mollusk {
    Mollusk::new(&PROGRAM_ID_SDK, "target/deploy/craps_pinocchio")
}

/// Test helper to create test keypairs
pub fn create_test_keypairs() -> (Keypair, Keypair, Keypair) {
    (
        Keypair::new(), // admin
        Keypair::new(), // player
        Keypair::new(), // rng_authority
    )
}

/// Test helper to derive PDAs
pub fn derive_pdas() -> (Pubkey, Pubkey, Pubkey) {
    let (global_state_pda, _) = pubkey::find_program_address(
        &[b"global_game_state"],
        &PROGRAM_ID
    );
    
    let (treasury_pda, _) = pubkey::find_program_address(
        &[b"treasury"],
        &PROGRAM_ID
    );
    
    let (rng_state_pda, _) = pubkey::find_program_address(
        &[b"rng_state"],
        &PROGRAM_ID
    );
    
    (global_state_pda, treasury_pda, rng_state_pda)
}

/// Test helper to create player PDA
pub fn derive_player_pda(player: &Pubkey) -> (Pubkey, u8) {
    pubkey::find_program_address(
        &[b"player", player.as_ref()],
        &PROGRAM_ID
    )
}

/// Test helper to create bet batch PDA
pub fn derive_bet_batch_pda(player: &Pubkey, epoch: u64) -> (Pubkey, u8) {
    pubkey::find_program_address(
        &[b"bet_batch", player.as_ref(), &epoch.to_le_bytes()],
        &PROGRAM_ID
    )
}

/// Test helper to create initialized accounts
pub fn create_initialized_accounts(mollusk: &Mollusk) -> (Keypair, Keypair, Keypair, Pubkey, Pubkey, Pubkey) {
    let (admin, player, rng_authority) = create_test_keypairs();
    let (global_state_pda, treasury_pda, rng_state_pda) = derive_pdas();
    
    // Create accounts for PDAs
    let global_state_account = SolanaAccount::new(
        mollusk.sysvars.rent.minimum_balance(GlobalGameState::LEN),
        GlobalGameState::LEN,
        &PROGRAM_ID,
    );
    
    let treasury_account = SolanaAccount::new(
        mollusk.sysvars.rent.minimum_balance(Treasury::LEN),
        Treasury::LEN,
        &PROGRAM_ID,
    );
    
    let rng_state_account = SolanaAccount::new(
        mollusk.sysvars.rent.minimum_balance(RngState::LEN),
        RngState::LEN,
        &PROGRAM_ID,
    );
    
    (admin, player, rng_authority, global_state_pda, treasury_pda, rng_state_pda)
}

/// Test helper to create instruction data
pub fn create_instruction_data(discriminant: u8, data: &[u8]) -> Vec<u8> {
    let mut instruction_data = vec![discriminant];
    instruction_data.extend_from_slice(data);
    instruction_data
}

/// Test helper to check account data
pub fn check_account_data<T: Pod>(account_data: &[u8]) -> &T {
    bytemuck::from_bytes::<T>(account_data)
}

/// Test helper to check mutable account data
pub fn check_account_data_mut<T: Pod>(account_data: &mut [u8]) -> &mut T {
    bytemuck::from_bytes_mut::<T>(account_data)
}

/// Test helper to create a basic initialized game state
pub fn setup_basic_game_state(mollusk: &Mollusk) -> (Keypair, Keypair, Keypair, Pubkey, Pubkey, Pubkey) {
    let (admin, player, rng_authority, global_state_pda, treasury_pda, rng_state_pda) = 
        create_initialized_accounts(mollusk);
    
    // Initialize system instruction
    let init_data = create_instruction_data(CrapsInstruction::InitializeSystem as u8, &[]);
    
    let instruction = Instruction::new_with_bytes(
        PROGRAM_ID,
        &init_data,
        vec![
            AccountMeta::new(global_state_pda, false),
            AccountMeta::new(treasury_pda, false),
            AccountMeta::new(rng_state_pda, false),
            AccountMeta::new(admin.pubkey(), true),
            AccountMeta::new_readonly(pinocchio_system::ID, false),
        ],
    );
    
    // Execute initialization
    mollusk.process_and_validate_instruction(
        &instruction,
        &vec![
            (global_state_pda, SolanaAccount::new(
                mollusk.sysvars.rent.minimum_balance(GlobalGameState::LEN),
                GlobalGameState::LEN,
                &PROGRAM_ID,
            )),
            (treasury_pda, SolanaAccount::new(
                mollusk.sysvars.rent.minimum_balance(Treasury::LEN),
                Treasury::LEN,
                &PROGRAM_ID,
            )),
            (rng_state_pda, SolanaAccount::new(
                mollusk.sysvars.rent.minimum_balance(RngState::LEN),
                RngState::LEN,
                &PROGRAM_ID,
            )),
            (admin.pubkey(), SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(0),
                0,
                &system_program::ID,
            )),
        ],
        &[
            Check::success(),
            Check::account(&global_state_pda)
                .owner(&PROGRAM_ID)
                .build(),
        ],
    );
    
    (admin, player, rng_authority, global_state_pda, treasury_pda, rng_state_pda)
}

/// Test helper to create a player account
pub fn create_player_account(
    mollusk: &Mollusk,
    player: &Keypair,
    global_state_pda: &Pubkey,
    treasury_pda: &Pubkey,
    rng_state_pda: &Pubkey,
) -> Pubkey {
    let (player_pda, bump) = derive_player_pda(&player.pubkey());
    
    let init_player_data = create_instruction_data(
        CrapsInstruction::InitializePlayer as u8, 
        &[bump]
    );
    
    let instruction = Instruction::new_with_bytes(
        PROGRAM_ID,
        &init_player_data,
        vec![
            AccountMeta::new(player.pubkey(), true),
            AccountMeta::new(player_pda, false),
            AccountMeta::new_readonly(*global_state_pda, false),
            AccountMeta::new_readonly(*treasury_pda, false),
            AccountMeta::new_readonly(*rng_state_pda, false),
            AccountMeta::new_readonly(pinocchio_system::ID, false),
        ],
    );
    
    mollusk.process_and_validate_instruction(
        &instruction,
        &vec![
            (player.pubkey(), SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(0),
                0,
                &system_program::ID,
            )),
            (player_pda, SolanaAccount::new(
                mollusk.sysvars.rent.minimum_balance(ScalablePlayerState::LEN),
                ScalablePlayerState::LEN,
                &PROGRAM_ID,
            )),
            (*global_state_pda, SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(GlobalGameState::LEN),
                GlobalGameState::LEN,
                &PROGRAM_ID,
            )),
            (*treasury_pda, SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(Treasury::LEN),
                Treasury::LEN,
                &PROGRAM_ID,
            )),
            (*rng_state_pda, SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(RngState::LEN),
                RngState::LEN,
                &PROGRAM_ID,
            )),
        ],
        &[
            Check::success(),
            Check::account(&player_pda)
                .owner(&PROGRAM_ID)
                .data_len(ScalablePlayerState::LEN)
                .build(),
        ],
    );
    
    player_pda
}

/// Test helper to place a bet
pub fn place_bet(
    mollusk: &Mollusk,
    player: &Keypair,
    player_pda: &Pubkey,
    global_state_pda: &Pubkey,
    treasury_pda: &Pubkey,
    bet_type: u8,
    amount: u64,
    repeater_target: Option<u8>,
) -> Pubkey {
    let current_epoch = 1u64; // For testing, use epoch 1
    let (bet_batch_pda, _) = derive_bet_batch_pda(&player.pubkey(), current_epoch);
    
    let mut bet_data = vec![bet_type];
    bet_data.extend_from_slice(&amount.to_le_bytes());
    bet_data.push(repeater_target.unwrap_or(0));
    
    let place_bet_data = create_instruction_data(
        CrapsInstruction::PlaceBet as u8,
        &bet_data,
    );
    
    let instruction = Instruction::new_with_bytes(
        PROGRAM_ID,
        &place_bet_data,
        vec![
            AccountMeta::new(*player_pda, false),
            AccountMeta::new(bet_batch_pda, false),
            AccountMeta::new(*global_state_pda, false),
            AccountMeta::new_readonly(*treasury_pda, false),
            AccountMeta::new_readonly(pinocchio::sysvars::clock::ID, false),
        ],
    );
    
    mollusk.process_and_validate_instruction(
        &instruction,
        &vec![
            (*player_pda, SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(ScalablePlayerState::LEN),
                ScalablePlayerState::LEN,
                &PROGRAM_ID,
            )),
            (bet_batch_pda, SolanaAccount::new(
                mollusk.sysvars.rent.minimum_balance(BetBatch::LEN),
                BetBatch::LEN,
                &PROGRAM_ID,
            )),
            (*global_state_pda, SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(GlobalGameState::LEN),
                GlobalGameState::LEN,
                &PROGRAM_ID,
            )),
            (*treasury_pda, SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(Treasury::LEN),
                Treasury::LEN,
                &PROGRAM_ID,
            )),
        ],
        &[
            Check::success(),
            Check::account(&bet_batch_pda)
                .owner(&PROGRAM_ID)
                .build(),
        ],
    );
    
    bet_batch_pda
}

/// Test helper to simulate dice roll
pub fn simulate_dice_roll(
    mollusk: &Mollusk,
    global_state_pda: &Pubkey,
    rng_state_pda: &Pubkey,
    rng_authority: &Keypair,
) {
    let auto_roll_data = create_instruction_data(CrapsInstruction::SecureAutoRoll as u8, &[]);
    
    let instruction = Instruction::new_with_bytes(
        PROGRAM_ID,
        &auto_roll_data,
        vec![
            AccountMeta::new(*global_state_pda, false),
            AccountMeta::new_readonly(*rng_state_pda, false),
            AccountMeta::new_readonly(rng_authority.pubkey(), true),
        ],
    );
    
    mollusk.process_and_validate_instruction(
        &instruction,
        &vec![
            (*global_state_pda, SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(GlobalGameState::LEN),
                GlobalGameState::LEN,
                &PROGRAM_ID,
            )),
            (*rng_state_pda, SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(RngState::LEN),
                RngState::LEN,
                &PROGRAM_ID,
            )),
            (rng_authority.pubkey(), SolanaAccount::new_ref(
                mollusk.sysvars.rent.minimum_balance(0),
                0,
                &system_program::ID,
            )),
        ],
        &[
            Check::success(),
            Check::account(global_state_pda)
                .data(|data| {
                    let state = check_account_data::<GlobalGameState>(data);
                    state.dice1 >= 1 && state.dice1 <= 6 &&
                    state.dice2 >= 1 && state.dice2 <= 6
                })
                .build(),
        ],
    );
}

#[cfg(test)]
mod tests {
    use super::*;
    use craps_pinocchio::constants::*;
    
    #[test]
    fn test_system_initialization() {
        let mollusk = create_mollusk();
        let (admin, _, rng_authority) = create_test_keypairs();
        let (global_state_pda, treasury_pda, rng_state_pda) = derive_pdas();
        
        let init_data = create_instruction_data(CrapsInstruction::InitializeSystem as u8, &[]);
        
        let instruction = Instruction::new_with_bytes(
            PROGRAM_ID,
            &init_data,
            vec![
                AccountMeta::new(global_state_pda, false),
                AccountMeta::new(treasury_pda, false),
                AccountMeta::new(rng_state_pda, false),
                AccountMeta::new(admin.pubkey(), true),
                AccountMeta::new_readonly(pinocchio_system::ID, false),
            ],
        );
        
        mollusk.process_and_validate_instruction(
            &instruction,
            &vec![
                (global_state_pda, SolanaAccount::new(
                    mollusk.sysvars.rent.minimum_balance(GlobalGameState::LEN),
                    GlobalGameState::LEN,
                    &PROGRAM_ID,
                )),
                (treasury_pda, SolanaAccount::new(
                    mollusk.sysvars.rent.minimum_balance(Treasury::LEN),
                    Treasury::LEN,
                    &PROGRAM_ID,
                )),
                (rng_state_pda, SolanaAccount::new(
                    mollusk.sysvars.rent.minimum_balance(RngState::LEN),
                    RngState::LEN,
                    &PROGRAM_ID,
                )),
                (admin.pubkey(), SolanaAccount::new_ref(
                    mollusk.sysvars.rent.minimum_balance(0),
                    0,
                    &system_program::ID,
                )),
            ],
            &[
                Check::success(),
                Check::account(&global_state_pda)
                    .owner(&PROGRAM_ID)
                    .data_len(GlobalGameState::LEN)
                    .build(),
                Check::account(&treasury_pda)
                    .owner(&PROGRAM_ID)
                    .data_len(Treasury::LEN)
                    .build(),
                Check::account(&rng_state_pda)
                    .owner(&PROGRAM_ID)
                    .data_len(RngState::LEN)
                    .build(),
            ],
        );
    }
    
    #[test]
    fn test_player_creation() {
        let mollusk = create_mollusk();
        let (admin, player, rng_authority, global_state_pda, treasury_pda, rng_state_pda) = 
            setup_basic_game_state(&mollusk);
        
        let player_pda = create_player_account(
            &mollusk,
            &player,
            &global_state_pda,
            &treasury_pda,
            &rng_state_pda,
        );
        
        // Verify player account was created correctly
        assert_ne!(player_pda, Pubkey::default());
    }
    
    #[test]
    fn test_place_pass_bet() {
        let mollusk = create_mollusk();
        let (admin, player, rng_authority, global_state_pda, treasury_pda, rng_state_pda) = 
            setup_basic_game_state(&mollusk);
        
        let player_pda = create_player_account(
            &mollusk,
            &player,
            &global_state_pda,
            &treasury_pda,
            &rng_state_pda,
        );
        
        let bet_batch_pda = place_bet(
            &mollusk,
            &player,
            &player_pda,
            &global_state_pda,
            &treasury_pda,
            BET_PASS,
            100,
            None,
        );
        
        // Verify bet was placed
        assert_ne!(bet_batch_pda, Pubkey::default());
    }
    
    #[test]
    fn test_dice_roll() {
        let mollusk = create_mollusk();
        let (admin, player, rng_authority, global_state_pda, treasury_pda, rng_state_pda) = 
            setup_basic_game_state(&mollusk);
        
        simulate_dice_roll(&mollusk, &global_state_pda, &rng_state_pda, &rng_authority);
        
        // Test passes if no panic occurs
    }
    
    #[test]
    fn test_full_game_flow() {
        let mollusk = create_mollusk();
        let (admin, player, rng_authority, global_state_pda, treasury_pda, rng_state_pda) = 
            setup_basic_game_state(&mollusk);
        
        // 1. Create player
        let player_pda = create_player_account(
            &mollusk,
            &player,
            &global_state_pda,
            &treasury_pda,
            &rng_state_pda,
        );
        
        // 2. Place bet
        let bet_batch_pda = place_bet(
            &mollusk,
            &player,
            &player_pda,
            &global_state_pda,
            &treasury_pda,
            BET_PASS,
            100,
            None,
        );
        
        // 3. Roll dice
        simulate_dice_roll(&mollusk, &global_state_pda, &rng_state_pda, &rng_authority);
        
        // Test passes if all steps complete without error
    }
    
    #[test]
    fn test_multiple_bet_types() {
        let mollusk = create_mollusk();
        let (admin, player, rng_authority, global_state_pda, treasury_pda, rng_state_pda) = 
            setup_basic_game_state(&mollusk);
        
        let player_pda = create_player_account(
            &mollusk,
            &player,
            &global_state_pda,
            &treasury_pda,
            &rng_state_pda,
        );
        
        // Test different bet types
        let bet_types = vec![BET_PASS, BET_DONT_PASS, BET_FIELD, BET_COME];
        
        for bet_type in bet_types {
            let bet_batch_pda = place_bet(
                &mollusk,
                &player,
                &player_pda,
                &global_state_pda,
                &treasury_pda,
                bet_type,
                50,
                None,
            );
            
            assert_ne!(bet_batch_pda, Pubkey::default());
        }
    }
    
    #[test]
    fn test_error_conditions() {
        let mollusk = create_mollusk();
        let (admin, player, rng_authority, global_state_pda, treasury_pda, rng_state_pda) = 
            setup_basic_game_state(&mollusk);
        
        // Test placing bet without player account should fail
        let current_epoch = 1u64;
        let (bet_batch_pda, _) = derive_bet_batch_pda(&player.pubkey(), current_epoch);
        
        let bet_data = vec![BET_PASS];
        let amount_bytes = 100u64.to_le_bytes();
        let mut full_data = bet_data;
        full_data.extend_from_slice(&amount_bytes);
        full_data.push(0u8); // repeater target
        
        let place_bet_data = create_instruction_data(
            CrapsInstruction::PlaceBet as u8,
            &full_data,
        );
        
        let instruction = Instruction::new_with_bytes(
            PROGRAM_ID,
            &place_bet_data,
            vec![
                AccountMeta::new(Pubkey::new_unique(), false), // Wrong player PDA
                AccountMeta::new(bet_batch_pda, false),
                AccountMeta::new(global_state_pda, false),
                AccountMeta::new_readonly(treasury_pda, false),
                AccountMeta::new_readonly(pinocchio::sysvars::clock::ID, false),
            ],
        );
        
        // This should fail - we expect an error
        let result = mollusk.process_instruction(
            &instruction,
            &vec![
                (Pubkey::new_unique(), SolanaAccount::new_ref(
                    mollusk.sysvars.rent.minimum_balance(ScalablePlayerState::LEN),
                    ScalablePlayerState::LEN,
                    &PROGRAM_ID,
                )),
                (bet_batch_pda, SolanaAccount::new(
                    mollusk.sysvars.rent.minimum_balance(BetBatch::LEN),
                    BetBatch::LEN,
                    &PROGRAM_ID,
                )),
                (global_state_pda, SolanaAccount::new_ref(
                    mollusk.sysvars.rent.minimum_balance(GlobalGameState::LEN),
                    GlobalGameState::LEN,
                    &PROGRAM_ID,
                )),
                (treasury_pda, SolanaAccount::new_ref(
                    mollusk.sysvars.rent.minimum_balance(Treasury::LEN),
                    Treasury::LEN,
                    &PROGRAM_ID,
                )),
            ],
        );
        
        assert!(result.program_result.is_err());
    }
}