/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type BetBatch = {
  epoch: ReadonlyUint8Array;
  player: ReadonlyUint8Array;
  betCount: number;
  padding1: ReadonlyUint8Array;
  totalAmount: ReadonlyUint8Array;
  packedBets: ReadonlyUint8Array;
  resolvedMask: ReadonlyUint8Array;
  realizableMask: ReadonlyUint8Array;
  settledMask: ReadonlyUint8Array;
  winningMask: ReadonlyUint8Array;
  payoutTotal: ReadonlyUint8Array;
  individualPayouts: ReadonlyUint8Array;
  comePoints: ReadonlyUint8Array;
  linkedBets: ReadonlyUint8Array;
  cachedOutcomes: ReadonlyUint8Array;
  cacheEpoch: ReadonlyUint8Array;
  bump: number;
  padding2: ReadonlyUint8Array;
};

export type BetBatchArgs = BetBatch;

export function getBetBatchEncoder(): Encoder<BetBatchArgs> {
  return getStructEncoder([
    ['epoch', fixEncoderSize(getBytesEncoder(), 8)],
    ['player', fixEncoderSize(getBytesEncoder(), 32)],
    ['betCount', getU8Encoder()],
    ['padding1', fixEncoderSize(getBytesEncoder(), 7)],
    ['totalAmount', fixEncoderSize(getBytesEncoder(), 8)],
    ['packedBets', fixEncoderSize(getBytesEncoder(), 32)],
    ['resolvedMask', fixEncoderSize(getBytesEncoder(), 2)],
    ['realizableMask', fixEncoderSize(getBytesEncoder(), 2)],
    ['settledMask', fixEncoderSize(getBytesEncoder(), 2)],
    ['winningMask', fixEncoderSize(getBytesEncoder(), 2)],
    ['payoutTotal', fixEncoderSize(getBytesEncoder(), 8)],
    ['individualPayouts', fixEncoderSize(getBytesEncoder(), 128)],
    ['comePoints', fixEncoderSize(getBytesEncoder(), 16)],
    ['linkedBets', fixEncoderSize(getBytesEncoder(), 16)],
    ['cachedOutcomes', fixEncoderSize(getBytesEncoder(), 16)],
    ['cacheEpoch', fixEncoderSize(getBytesEncoder(), 8)],
    ['bump', getU8Encoder()],
    ['padding2', fixEncoderSize(getBytesEncoder(), 7)],
  ]);
}

export function getBetBatchDecoder(): Decoder<BetBatch> {
  return getStructDecoder([
    ['epoch', fixDecoderSize(getBytesDecoder(), 8)],
    ['player', fixDecoderSize(getBytesDecoder(), 32)],
    ['betCount', getU8Decoder()],
    ['padding1', fixDecoderSize(getBytesDecoder(), 7)],
    ['totalAmount', fixDecoderSize(getBytesDecoder(), 8)],
    ['packedBets', fixDecoderSize(getBytesDecoder(), 32)],
    ['resolvedMask', fixDecoderSize(getBytesDecoder(), 2)],
    ['realizableMask', fixDecoderSize(getBytesDecoder(), 2)],
    ['settledMask', fixDecoderSize(getBytesDecoder(), 2)],
    ['winningMask', fixDecoderSize(getBytesDecoder(), 2)],
    ['payoutTotal', fixDecoderSize(getBytesDecoder(), 8)],
    ['individualPayouts', fixDecoderSize(getBytesDecoder(), 128)],
    ['comePoints', fixDecoderSize(getBytesDecoder(), 16)],
    ['linkedBets', fixDecoderSize(getBytesDecoder(), 16)],
    ['cachedOutcomes', fixDecoderSize(getBytesDecoder(), 16)],
    ['cacheEpoch', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['padding2', fixDecoderSize(getBytesDecoder(), 7)],
  ]);
}

export function getBetBatchCodec(): Codec<BetBatchArgs, BetBatch> {
  return combineCodec(getBetBatchEncoder(), getBetBatchDecoder());
}

export function decodeBetBatch<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<BetBatch, TAddress>;
export function decodeBetBatch<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<BetBatch, TAddress>;
export function decodeBetBatch<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<BetBatch, TAddress> | MaybeAccount<BetBatch, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBetBatchDecoder(),
  );
}

export async function fetchBetBatch<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<BetBatch, TAddress>> {
  const maybeAccount = await fetchMaybeBetBatch(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBetBatch<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<BetBatch, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBetBatch(maybeAccount);
}

export async function fetchAllBetBatch(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<BetBatch>[]> {
  const maybeAccounts = await fetchAllMaybeBetBatch(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBetBatch(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<BetBatch>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBetBatch(maybeAccount));
}

export function getBetBatchSize(): number {
  return 296;
}
