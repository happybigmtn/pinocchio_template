/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CRAPS_PINOCCHIO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLEANUP_OLD_BET_BATCH_DISCRIMINATOR = 16;

export function getCleanupOldBetBatchDiscriminatorBytes() {
  return getU8Encoder().encode(CLEANUP_OLD_BET_BATCH_DISCRIMINATOR);
}

export type CleanupOldBetBatchInstruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountBetBatch extends string | IAccountMeta<string> = string,
  TAccountGlobalGameState extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountBetBatch extends string
        ? WritableAccount<TAccountBetBatch>
        : TAccountBetBatch,
      TAccountGlobalGameState extends string
        ? ReadonlyAccount<TAccountGlobalGameState>
        : TAccountGlobalGameState,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type CleanupOldBetBatchInstructionData = { discriminator: number };

export type CleanupOldBetBatchInstructionDataArgs = {};

export function getCleanupOldBetBatchInstructionDataEncoder(): Encoder<CleanupOldBetBatchInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: CLEANUP_OLD_BET_BATCH_DISCRIMINATOR,
    }),
  );
}

export function getCleanupOldBetBatchInstructionDataDecoder(): Decoder<CleanupOldBetBatchInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCleanupOldBetBatchInstructionDataCodec(): Codec<
  CleanupOldBetBatchInstructionDataArgs,
  CleanupOldBetBatchInstructionData
> {
  return combineCodec(
    getCleanupOldBetBatchInstructionDataEncoder(),
    getCleanupOldBetBatchInstructionDataDecoder(),
  );
}

export type CleanupOldBetBatchInput<
  TAccountBetBatch extends string = string,
  TAccountGlobalGameState extends string = string,
  TAccountAdmin extends string = string,
> = {
  /** Bet batch account to clean */
  betBatch: Address<TAccountBetBatch>;
  /** Global game state account */
  globalGameState: Address<TAccountGlobalGameState>;
  /** Admin authority */
  admin: TransactionSigner<TAccountAdmin>;
};

export function getCleanupOldBetBatchInstruction<
  TAccountBetBatch extends string,
  TAccountGlobalGameState extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
>(
  input: CleanupOldBetBatchInput<
    TAccountBetBatch,
    TAccountGlobalGameState,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress },
): CleanupOldBetBatchInstruction<
  TProgramAddress,
  TAccountBetBatch,
  TAccountGlobalGameState,
  TAccountAdmin
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CRAPS_PINOCCHIO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    betBatch: { value: input.betBatch ?? null, isWritable: true },
    globalGameState: {
      value: input.globalGameState ?? null,
      isWritable: false,
    },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.betBatch),
      getAccountMeta(accounts.globalGameState),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getCleanupOldBetBatchInstructionDataEncoder().encode({}),
  } as CleanupOldBetBatchInstruction<
    TProgramAddress,
    TAccountBetBatch,
    TAccountGlobalGameState,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedCleanupOldBetBatchInstruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Bet batch account to clean */
    betBatch: TAccountMetas[0];
    /** Global game state account */
    globalGameState: TAccountMetas[1];
    /** Admin authority */
    admin: TAccountMetas[2];
  };
  data: CleanupOldBetBatchInstructionData;
};

export function parseCleanupOldBetBatchInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedCleanupOldBetBatchInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      betBatch: getNextAccount(),
      globalGameState: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getCleanupOldBetBatchInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
