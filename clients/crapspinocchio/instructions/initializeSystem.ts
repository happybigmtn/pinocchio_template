/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CRAPS_PINOCCHIO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_SYSTEM_DISCRIMINATOR = 0;

export function getInitializeSystemDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_SYSTEM_DISCRIMINATOR);
}

export type InitializeSystemInstruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountGlobalGameState extends string | IAccountMeta<string> = string,
  TAccountTreasury extends string | IAccountMeta<string> = string,
  TAccountBonusState extends string | IAccountMeta<string> = string,
  TAccountRngState extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountGlobalGameState extends string
        ? WritableAccount<TAccountGlobalGameState>
        : TAccountGlobalGameState,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountBonusState extends string
        ? WritableAccount<TAccountBonusState>
        : TAccountBonusState,
      TAccountRngState extends string
        ? WritableAccount<TAccountRngState>
        : TAccountRngState,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeSystemInstructionData = { discriminator: number };

export type InitializeSystemInstructionDataArgs = {};

export function getInitializeSystemInstructionDataEncoder(): Encoder<InitializeSystemInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: INITIALIZE_SYSTEM_DISCRIMINATOR }),
  );
}

export function getInitializeSystemInstructionDataDecoder(): Decoder<InitializeSystemInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getInitializeSystemInstructionDataCodec(): Codec<
  InitializeSystemInstructionDataArgs,
  InitializeSystemInstructionData
> {
  return combineCodec(
    getInitializeSystemInstructionDataEncoder(),
    getInitializeSystemInstructionDataDecoder(),
  );
}

export type InitializeSystemInput<
  TAccountGlobalGameState extends string = string,
  TAccountTreasury extends string = string,
  TAccountBonusState extends string = string,
  TAccountRngState extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Global game state account */
  globalGameState: Address<TAccountGlobalGameState>;
  /** Treasury account */
  treasury: Address<TAccountTreasury>;
  /** Bonus state account */
  bonusState: Address<TAccountBonusState>;
  /** RNG state account */
  rngState: Address<TAccountRngState>;
  /** System authority */
  authority: TransactionSigner<TAccountAuthority>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeSystemInstruction<
  TAccountGlobalGameState extends string,
  TAccountTreasury extends string,
  TAccountBonusState extends string,
  TAccountRngState extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
>(
  input: InitializeSystemInput<
    TAccountGlobalGameState,
    TAccountTreasury,
    TAccountBonusState,
    TAccountRngState,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeSystemInstruction<
  TProgramAddress,
  TAccountGlobalGameState,
  TAccountTreasury,
  TAccountBonusState,
  TAccountRngState,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CRAPS_PINOCCHIO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    globalGameState: { value: input.globalGameState ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    bonusState: { value: input.bonusState ?? null, isWritable: true },
    rngState: { value: input.rngState ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.globalGameState),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.bonusState),
      getAccountMeta(accounts.rngState),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeSystemInstructionDataEncoder().encode({}),
  } as InitializeSystemInstruction<
    TProgramAddress,
    TAccountGlobalGameState,
    TAccountTreasury,
    TAccountBonusState,
    TAccountRngState,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeSystemInstruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Global game state account */
    globalGameState: TAccountMetas[0];
    /** Treasury account */
    treasury: TAccountMetas[1];
    /** Bonus state account */
    bonusState: TAccountMetas[2];
    /** RNG state account */
    rngState: TAccountMetas[3];
    /** System authority */
    authority: TAccountMetas[4];
    /** System program */
    systemProgram: TAccountMetas[5];
  };
  data: InitializeSystemInstructionData;
};

export function parseInitializeSystemInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedInitializeSystemInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      globalGameState: getNextAccount(),
      treasury: getNextAccount(),
      bonusState: getNextAccount(),
      rngState: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeSystemInstructionDataDecoder().decode(instruction.data),
  };
}
