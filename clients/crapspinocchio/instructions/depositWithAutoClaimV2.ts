/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CRAPS_PINOCCHIO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DEPOSIT_WITH_AUTO_CLAIM_V2_DISCRIMINATOR = 6;

export function getDepositWithAutoClaimV2DiscriminatorBytes() {
  return getU8Encoder().encode(DEPOSIT_WITH_AUTO_CLAIM_V2_DISCRIMINATOR);
}

export type DepositWithAutoClaimV2Instruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountTreasury extends string | IAccountMeta<string> = string,
  TAccountPlayerState extends string | IAccountMeta<string> = string,
  TAccountPlayerTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTreasuryTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPlayer extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountPlayerState extends string
        ? WritableAccount<TAccountPlayerState>
        : TAccountPlayerState,
      TAccountPlayerTokenAccount extends string
        ? WritableAccount<TAccountPlayerTokenAccount>
        : TAccountPlayerTokenAccount,
      TAccountTreasuryTokenAccount extends string
        ? WritableAccount<TAccountTreasuryTokenAccount>
        : TAccountTreasuryTokenAccount,
      TAccountPlayer extends string
        ? ReadonlySignerAccount<TAccountPlayer> &
            IAccountSignerMeta<TAccountPlayer>
        : TAccountPlayer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositWithAutoClaimV2InstructionData = { discriminator: number };

export type DepositWithAutoClaimV2InstructionDataArgs = {};

export function getDepositWithAutoClaimV2InstructionDataEncoder(): Encoder<DepositWithAutoClaimV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: DEPOSIT_WITH_AUTO_CLAIM_V2_DISCRIMINATOR,
    }),
  );
}

export function getDepositWithAutoClaimV2InstructionDataDecoder(): Decoder<DepositWithAutoClaimV2InstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getDepositWithAutoClaimV2InstructionDataCodec(): Codec<
  DepositWithAutoClaimV2InstructionDataArgs,
  DepositWithAutoClaimV2InstructionData
> {
  return combineCodec(
    getDepositWithAutoClaimV2InstructionDataEncoder(),
    getDepositWithAutoClaimV2InstructionDataDecoder(),
  );
}

export type DepositWithAutoClaimV2Input<
  TAccountTreasury extends string = string,
  TAccountPlayerState extends string = string,
  TAccountPlayerTokenAccount extends string = string,
  TAccountTreasuryTokenAccount extends string = string,
  TAccountPlayer extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Treasury account */
  treasury: Address<TAccountTreasury>;
  /** Player state account */
  playerState: Address<TAccountPlayerState>;
  /** Player's token account */
  playerTokenAccount: Address<TAccountPlayerTokenAccount>;
  /** Treasury's token account */
  treasuryTokenAccount: Address<TAccountTreasuryTokenAccount>;
  /** Player account */
  player: TransactionSigner<TAccountPlayer>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getDepositWithAutoClaimV2Instruction<
  TAccountTreasury extends string,
  TAccountPlayerState extends string,
  TAccountPlayerTokenAccount extends string,
  TAccountTreasuryTokenAccount extends string,
  TAccountPlayer extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
>(
  input: DepositWithAutoClaimV2Input<
    TAccountTreasury,
    TAccountPlayerState,
    TAccountPlayerTokenAccount,
    TAccountTreasuryTokenAccount,
    TAccountPlayer,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): DepositWithAutoClaimV2Instruction<
  TProgramAddress,
  TAccountTreasury,
  TAccountPlayerState,
  TAccountPlayerTokenAccount,
  TAccountTreasuryTokenAccount,
  TAccountPlayer,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CRAPS_PINOCCHIO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treasury: { value: input.treasury ?? null, isWritable: true },
    playerState: { value: input.playerState ?? null, isWritable: true },
    playerTokenAccount: {
      value: input.playerTokenAccount ?? null,
      isWritable: true,
    },
    treasuryTokenAccount: {
      value: input.treasuryTokenAccount ?? null,
      isWritable: true,
    },
    player: { value: input.player ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.playerTokenAccount),
      getAccountMeta(accounts.treasuryTokenAccount),
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getDepositWithAutoClaimV2InstructionDataEncoder().encode({}),
  } as DepositWithAutoClaimV2Instruction<
    TProgramAddress,
    TAccountTreasury,
    TAccountPlayerState,
    TAccountPlayerTokenAccount,
    TAccountTreasuryTokenAccount,
    TAccountPlayer,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedDepositWithAutoClaimV2Instruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Treasury account */
    treasury: TAccountMetas[0];
    /** Player state account */
    playerState: TAccountMetas[1];
    /** Player's token account */
    playerTokenAccount: TAccountMetas[2];
    /** Treasury's token account */
    treasuryTokenAccount: TAccountMetas[3];
    /** Player account */
    player: TAccountMetas[4];
    /** Token program */
    tokenProgram: TAccountMetas[5];
  };
  data: DepositWithAutoClaimV2InstructionData;
};

export function parseDepositWithAutoClaimV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedDepositWithAutoClaimV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treasury: getNextAccount(),
      playerState: getNextAccount(),
      playerTokenAccount: getNextAccount(),
      treasuryTokenAccount: getNextAccount(),
      player: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getDepositWithAutoClaimV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
