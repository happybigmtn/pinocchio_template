/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CRAPS_PINOCCHIO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_BLOCK_HASH_DISCRIMINATOR = 10;

export function getCollectBlockHashDiscriminatorBytes() {
  return getU8Encoder().encode(COLLECT_BLOCK_HASH_DISCRIMINATOR);
}

export type CollectBlockHashInstruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountRngState extends string | IAccountMeta<string> = string,
  TAccountGlobalGameState extends string | IAccountMeta<string> = string,
  TAccountRngAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRngState extends string
        ? WritableAccount<TAccountRngState>
        : TAccountRngState,
      TAccountGlobalGameState extends string
        ? ReadonlyAccount<TAccountGlobalGameState>
        : TAccountGlobalGameState,
      TAccountRngAuthority extends string
        ? ReadonlySignerAccount<TAccountRngAuthority> &
            IAccountSignerMeta<TAccountRngAuthority>
        : TAccountRngAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type CollectBlockHashInstructionData = { discriminator: number };

export type CollectBlockHashInstructionDataArgs = {};

export function getCollectBlockHashInstructionDataEncoder(): Encoder<CollectBlockHashInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: COLLECT_BLOCK_HASH_DISCRIMINATOR }),
  );
}

export function getCollectBlockHashInstructionDataDecoder(): Decoder<CollectBlockHashInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCollectBlockHashInstructionDataCodec(): Codec<
  CollectBlockHashInstructionDataArgs,
  CollectBlockHashInstructionData
> {
  return combineCodec(
    getCollectBlockHashInstructionDataEncoder(),
    getCollectBlockHashInstructionDataDecoder(),
  );
}

export type CollectBlockHashInput<
  TAccountRngState extends string = string,
  TAccountGlobalGameState extends string = string,
  TAccountRngAuthority extends string = string,
> = {
  /** RNG state account */
  rngState: Address<TAccountRngState>;
  /** Global game state account */
  globalGameState: Address<TAccountGlobalGameState>;
  /** RNG authority */
  rngAuthority: TransactionSigner<TAccountRngAuthority>;
};

export function getCollectBlockHashInstruction<
  TAccountRngState extends string,
  TAccountGlobalGameState extends string,
  TAccountRngAuthority extends string,
  TProgramAddress extends Address = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
>(
  input: CollectBlockHashInput<
    TAccountRngState,
    TAccountGlobalGameState,
    TAccountRngAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): CollectBlockHashInstruction<
  TProgramAddress,
  TAccountRngState,
  TAccountGlobalGameState,
  TAccountRngAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CRAPS_PINOCCHIO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rngState: { value: input.rngState ?? null, isWritable: true },
    globalGameState: {
      value: input.globalGameState ?? null,
      isWritable: false,
    },
    rngAuthority: { value: input.rngAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rngState),
      getAccountMeta(accounts.globalGameState),
      getAccountMeta(accounts.rngAuthority),
    ],
    programAddress,
    data: getCollectBlockHashInstructionDataEncoder().encode({}),
  } as CollectBlockHashInstruction<
    TProgramAddress,
    TAccountRngState,
    TAccountGlobalGameState,
    TAccountRngAuthority
  >;

  return instruction;
}

export type ParsedCollectBlockHashInstruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** RNG state account */
    rngState: TAccountMetas[0];
    /** Global game state account */
    globalGameState: TAccountMetas[1];
    /** RNG authority */
    rngAuthority: TAccountMetas[2];
  };
  data: CollectBlockHashInstructionData;
};

export function parseCollectBlockHashInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedCollectBlockHashInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rngState: getNextAccount(),
      globalGameState: getNextAccount(),
      rngAuthority: getNextAccount(),
    },
    data: getCollectBlockHashInstructionDataDecoder().decode(instruction.data),
  };
}
