/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { CRAPS_PINOCCHIO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_EPOCH_PAYOUTS_UNIFIED_DISCRIMINATOR = 14;

export function getClaimEpochPayoutsUnifiedDiscriminatorBytes() {
  return getU8Encoder().encode(CLAIM_EPOCH_PAYOUTS_UNIFIED_DISCRIMINATOR);
}

export type ClaimEpochPayoutsUnifiedInstruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountPlayer extends string | IAccountMeta<string> = string,
  TAccountPlayerState extends string | IAccountMeta<string> = string,
  TAccountTreasury extends string | IAccountMeta<string> = string,
  TAccountTreasuryTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPlayerTokenAccount extends string | IAccountMeta<string> = string,
  TAccountEpochOutcome extends string | IAccountMeta<string> = string,
  TAccountBetBatch extends string | IAccountMeta<string> = string,
  TAccountBonusState extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMint extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPlayer extends string
        ? ReadonlySignerAccount<TAccountPlayer> &
            IAccountSignerMeta<TAccountPlayer>
        : TAccountPlayer,
      TAccountPlayerState extends string
        ? WritableAccount<TAccountPlayerState>
        : TAccountPlayerState,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountTreasuryTokenAccount extends string
        ? WritableAccount<TAccountTreasuryTokenAccount>
        : TAccountTreasuryTokenAccount,
      TAccountPlayerTokenAccount extends string
        ? WritableAccount<TAccountPlayerTokenAccount>
        : TAccountPlayerTokenAccount,
      TAccountEpochOutcome extends string
        ? ReadonlyAccount<TAccountEpochOutcome>
        : TAccountEpochOutcome,
      TAccountBetBatch extends string
        ? WritableAccount<TAccountBetBatch>
        : TAccountBetBatch,
      TAccountBonusState extends string
        ? ReadonlyAccount<TAccountBonusState>
        : TAccountBonusState,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimEpochPayoutsUnifiedInstructionData = { discriminator: number };

export type ClaimEpochPayoutsUnifiedInstructionDataArgs = {};

export function getClaimEpochPayoutsUnifiedInstructionDataEncoder(): Encoder<ClaimEpochPayoutsUnifiedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: CLAIM_EPOCH_PAYOUTS_UNIFIED_DISCRIMINATOR,
    }),
  );
}

export function getClaimEpochPayoutsUnifiedInstructionDataDecoder(): Decoder<ClaimEpochPayoutsUnifiedInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getClaimEpochPayoutsUnifiedInstructionDataCodec(): Codec<
  ClaimEpochPayoutsUnifiedInstructionDataArgs,
  ClaimEpochPayoutsUnifiedInstructionData
> {
  return combineCodec(
    getClaimEpochPayoutsUnifiedInstructionDataEncoder(),
    getClaimEpochPayoutsUnifiedInstructionDataDecoder(),
  );
}

export type ClaimEpochPayoutsUnifiedInput<
  TAccountPlayer extends string = string,
  TAccountPlayerState extends string = string,
  TAccountTreasury extends string = string,
  TAccountTreasuryTokenAccount extends string = string,
  TAccountPlayerTokenAccount extends string = string,
  TAccountEpochOutcome extends string = string,
  TAccountBetBatch extends string = string,
  TAccountBonusState extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
> = {
  /** Player account */
  player: TransactionSigner<TAccountPlayer>;
  /** Player state account */
  playerState: Address<TAccountPlayerState>;
  /** Treasury account */
  treasury: Address<TAccountTreasury>;
  /** Treasury token account */
  treasuryTokenAccount: Address<TAccountTreasuryTokenAccount>;
  /** Player token account */
  playerTokenAccount: Address<TAccountPlayerTokenAccount>;
  /** Epoch outcome account */
  epochOutcome: Address<TAccountEpochOutcome>;
  /** Bet batch account */
  betBatch: Address<TAccountBetBatch>;
  /** Bonus state account */
  bonusState: Address<TAccountBonusState>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Token mint */
  mint: Address<TAccountMint>;
};

export function getClaimEpochPayoutsUnifiedInstruction<
  TAccountPlayer extends string,
  TAccountPlayerState extends string,
  TAccountTreasury extends string,
  TAccountTreasuryTokenAccount extends string,
  TAccountPlayerTokenAccount extends string,
  TAccountEpochOutcome extends string,
  TAccountBetBatch extends string,
  TAccountBonusState extends string,
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TProgramAddress extends Address = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
>(
  input: ClaimEpochPayoutsUnifiedInput<
    TAccountPlayer,
    TAccountPlayerState,
    TAccountTreasury,
    TAccountTreasuryTokenAccount,
    TAccountPlayerTokenAccount,
    TAccountEpochOutcome,
    TAccountBetBatch,
    TAccountBonusState,
    TAccountTokenProgram,
    TAccountMint
  >,
  config?: { programAddress?: TProgramAddress },
): ClaimEpochPayoutsUnifiedInstruction<
  TProgramAddress,
  TAccountPlayer,
  TAccountPlayerState,
  TAccountTreasury,
  TAccountTreasuryTokenAccount,
  TAccountPlayerTokenAccount,
  TAccountEpochOutcome,
  TAccountBetBatch,
  TAccountBonusState,
  TAccountTokenProgram,
  TAccountMint
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CRAPS_PINOCCHIO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    player: { value: input.player ?? null, isWritable: false },
    playerState: { value: input.playerState ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    treasuryTokenAccount: {
      value: input.treasuryTokenAccount ?? null,
      isWritable: true,
    },
    playerTokenAccount: {
      value: input.playerTokenAccount ?? null,
      isWritable: true,
    },
    epochOutcome: { value: input.epochOutcome ?? null, isWritable: false },
    betBatch: { value: input.betBatch ?? null, isWritable: true },
    bonusState: { value: input.bonusState ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.treasuryTokenAccount),
      getAccountMeta(accounts.playerTokenAccount),
      getAccountMeta(accounts.epochOutcome),
      getAccountMeta(accounts.betBatch),
      getAccountMeta(accounts.bonusState),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
    ],
    programAddress,
    data: getClaimEpochPayoutsUnifiedInstructionDataEncoder().encode({}),
  } as ClaimEpochPayoutsUnifiedInstruction<
    TProgramAddress,
    TAccountPlayer,
    TAccountPlayerState,
    TAccountTreasury,
    TAccountTreasuryTokenAccount,
    TAccountPlayerTokenAccount,
    TAccountEpochOutcome,
    TAccountBetBatch,
    TAccountBonusState,
    TAccountTokenProgram,
    TAccountMint
  >;

  return instruction;
}

export type ParsedClaimEpochPayoutsUnifiedInstruction<
  TProgram extends string = typeof CRAPS_PINOCCHIO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Player account */
    player: TAccountMetas[0];
    /** Player state account */
    playerState: TAccountMetas[1];
    /** Treasury account */
    treasury: TAccountMetas[2];
    /** Treasury token account */
    treasuryTokenAccount: TAccountMetas[3];
    /** Player token account */
    playerTokenAccount: TAccountMetas[4];
    /** Epoch outcome account */
    epochOutcome: TAccountMetas[5];
    /** Bet batch account */
    betBatch: TAccountMetas[6];
    /** Bonus state account */
    bonusState: TAccountMetas[7];
    /** Token program */
    tokenProgram: TAccountMetas[8];
    /** Token mint */
    mint: TAccountMetas[9];
  };
  data: ClaimEpochPayoutsUnifiedInstructionData;
};

export function parseClaimEpochPayoutsUnifiedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedClaimEpochPayoutsUnifiedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      player: getNextAccount(),
      playerState: getNextAccount(),
      treasury: getNextAccount(),
      treasuryTokenAccount: getNextAccount(),
      playerTokenAccount: getNextAccount(),
      epochOutcome: getNextAccount(),
      betBatch: getNextAccount(),
      bonusState: getNextAccount(),
      tokenProgram: getNextAccount(),
      mint: getNextAccount(),
    },
    data: getClaimEpochPayoutsUnifiedInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
