/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type RngState = {
  epoch: ReadonlyUint8Array;
  phase: number;
  hashCount: number;
  padding1: ReadonlyUint8Array;
  bettingStartSlot: ReadonlyUint8Array;
  collectionStartSlot: ReadonlyUint8Array;
  finalizationSlot: ReadonlyUint8Array;
  blockHashes: ReadonlyUint8Array;
  finalValue: ReadonlyUint8Array;
  bump: number;
  padding2: ReadonlyUint8Array;
};

export type RngStateArgs = RngState;

export function getRngStateEncoder(): Encoder<RngStateArgs> {
  return getStructEncoder([
    ['epoch', fixEncoderSize(getBytesEncoder(), 8)],
    ['phase', getU8Encoder()],
    ['hashCount', getU8Encoder()],
    ['padding1', fixEncoderSize(getBytesEncoder(), 6)],
    ['bettingStartSlot', fixEncoderSize(getBytesEncoder(), 8)],
    ['collectionStartSlot', fixEncoderSize(getBytesEncoder(), 8)],
    ['finalizationSlot', fixEncoderSize(getBytesEncoder(), 8)],
    ['blockHashes', fixEncoderSize(getBytesEncoder(), 320)],
    ['finalValue', fixEncoderSize(getBytesEncoder(), 8)],
    ['bump', getU8Encoder()],
    ['padding2', fixEncoderSize(getBytesEncoder(), 7)],
  ]);
}

export function getRngStateDecoder(): Decoder<RngState> {
  return getStructDecoder([
    ['epoch', fixDecoderSize(getBytesDecoder(), 8)],
    ['phase', getU8Decoder()],
    ['hashCount', getU8Decoder()],
    ['padding1', fixDecoderSize(getBytesDecoder(), 6)],
    ['bettingStartSlot', fixDecoderSize(getBytesDecoder(), 8)],
    ['collectionStartSlot', fixDecoderSize(getBytesDecoder(), 8)],
    ['finalizationSlot', fixDecoderSize(getBytesDecoder(), 8)],
    ['blockHashes', fixDecoderSize(getBytesDecoder(), 320)],
    ['finalValue', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['padding2', fixDecoderSize(getBytesDecoder(), 7)],
  ]);
}

export function getRngStateCodec(): Codec<RngStateArgs, RngState> {
  return combineCodec(getRngStateEncoder(), getRngStateDecoder());
}

export function decodeRngState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<RngState, TAddress>;
export function decodeRngState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<RngState, TAddress>;
export function decodeRngState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<RngState, TAddress> | MaybeAccount<RngState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRngStateDecoder(),
  );
}

export async function fetchRngState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<RngState, TAddress>> {
  const maybeAccount = await fetchMaybeRngState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRngState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<RngState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRngState(maybeAccount);
}

export async function fetchAllRngState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<RngState>[]> {
  const maybeAccounts = await fetchAllMaybeRngState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRngState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<RngState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRngState(maybeAccount));
}

export function getRngStateSize(): number {
  return 376;
}
